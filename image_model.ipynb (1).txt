{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d239064e",
   "metadata": {},
   "source": [
    "#### Importing Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d0367127",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3340765",
   "metadata": {},
   "source": [
    "#### Splitting Dataset into Train Test Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "90a72485",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Copying files: 4175 files [00:02, 1714.51 files/s]\n"
     ]
    }
   ],
   "source": [
    "import splitfolders\n",
    "\n",
    "splitfolders.ratio(\n",
    "    \"../Final Dataset\", \n",
    "    output=\"../Final Dataset Split\",\n",
    "    seed=42, \n",
    "    ratio=(.7, .2, .1),  \n",
    "    move=False  # Set to  move files instead of copying\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c35c6949",
   "metadata": {},
   "source": [
    "#### Data Augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a74626c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 2921 images belonging to 4 classes.\n",
      "Found 835 images belonging to 4 classes.\n",
      "Found 419 images belonging to 4 classes.\n"
     ]
    }
   ],
   "source": [
    "parent_dir = \"../Final Dataset Split\"\n",
    "\n",
    "image_dims = (224, 224)\n",
    "batch_size = 32\n",
    "\n",
    "# Train Data Augmentation\n",
    "train_data = ImageDataGenerator(\n",
    "    rescale=1./255,\n",
    "    rotation_range=45,\n",
    "    zoom_range=0.1,\n",
    "    width_shift_range=0.1,\n",
    "    height_shift_range=0.1,\n",
    "    horizontal_flip=True\n",
    ")\n",
    "\n",
    "val_test_datagen = ImageDataGenerator(rescale=1./255)\n",
    "\n",
    "# Create the generators\n",
    "train_generator = train_data.flow_from_directory(\n",
    "    directory=os.path.join(parent_dir, 'train'),\n",
    "    target_size=image_dims,\n",
    "    color_mode='rgb',\n",
    "    batch_size=batch_size,\n",
    "    class_mode='categorical'\n",
    ")\n",
    "\n",
    "val_generator = val_test_datagen.flow_from_directory(\n",
    "    directory=os.path.join(parent_dir, 'val'),\n",
    "    target_size=image_dims,\n",
    "    color_mode='rgb',\n",
    "    batch_size=batch_size,\n",
    "    class_mode='categorical'\n",
    ")\n",
    "\n",
    "test_generator = val_test_datagen.flow_from_directory(\n",
    "    directory=os.path.join(parent_dir, 'test'),\n",
    "    target_size=image_dims,\n",
    "    color_mode='rgb',\n",
    "    batch_size=batch_size,\n",
    "    class_mode='categorical',\n",
    "    shuffle=False \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "abf099da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Lung_Opacity': 0, 'Normal': 1, 'Tuberculosis': 2, 'Viral Pneumonia': 3}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_generator.class_indices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "26aa6edb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test has {'Lung_Opacity': 113, 'Normal': 125, 'Tuberculosis': 71, 'Viral Pneumonia': 110}\n",
      "train has {'Lung_Opacity': 787, 'Normal': 875, 'Tuberculosis': 489, 'Viral Pneumonia': 770}\n",
      "val has {'Lung_Opacity': 225, 'Normal': 250, 'Tuberculosis': 140, 'Viral Pneumonia': 220}\n"
     ]
    }
   ],
   "source": [
    "parent_path = \"../Final Dataset Split\"\n",
    "dirs = os.listdir(parent_path)\n",
    "for dir in dirs:\n",
    "    sub_dir = os.path.join(parent_path, dir)\n",
    "    folders = os.listdir(sub_dir)\n",
    "    file_counts = {}\n",
    "    for f in folders:\n",
    "        folder_path = os.path.join(f\"../Final Dataset Split/{dir}\", f)\n",
    "        if os.path.isdir(folder_path):\n",
    "            file_count = sum(\n",
    "                1 for entry in os.listdir(folder_path)\n",
    "                if os.path.isfile(os.path.join(folder_path, entry))\n",
    "            )\n",
    "\n",
    "            file_counts[f]=file_count\n",
    "\n",
    "    print(f\"{dir} has {file_counts}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4e736b2",
   "metadata": {},
   "source": [
    "#### Model Building"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8c7521f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.applications import MobileNetV2\n",
    "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "837670c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_path = \"../code files/trained_model.keras\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c1d9cc34",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.callbacks import ModelCheckpoint\n",
    "checkpoint = ModelCheckpoint(model_path, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')\n",
    "callbacks_list = [checkpoint]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "637bf0a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load MobileNetV2 without the top classification layer\n",
    "base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n",
    "\n",
    "# Freeze the base model\n",
    "base_model.trainable = False\n",
    "\n",
    "x = base_model.output\n",
    "x = GlobalAveragePooling2D()(x)\n",
    "x = Dropout(0.2)(x) \n",
    "predictions = Dense(4, activation='softmax')(x)\n",
    "\n",
    "# Final model\n",
    "model = Model(inputs=base_model.input, outputs=predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4f8edc26",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.optimizers import Adam\n",
    "model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a999663f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "e:\\Free Lancing\\URL\\Anish COPD\\copdenv\\Lib\\site-packages\\keras\\src\\trainers\\data_adapters\\py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
      "  self._warn_if_super_not_called()\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 981ms/step - accuracy: 0.3223 - loss: 1.5794\n",
      "Epoch 1: val_accuracy improved from -inf to 0.60958, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m117s\u001b[0m 1s/step - accuracy: 0.3231 - loss: 1.5771 - val_accuracy: 0.6096 - val_loss: 1.0141\n",
      "Epoch 2/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 876ms/step - accuracy: 0.6034 - loss: 0.9816\n",
      "Epoch 2: val_accuracy improved from 0.60958 to 0.76527, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m99s\u001b[0m 1s/step - accuracy: 0.6040 - loss: 0.9806 - val_accuracy: 0.7653 - val_loss: 0.7411\n",
      "Epoch 3/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 885ms/step - accuracy: 0.7575 - loss: 0.6890\n",
      "Epoch 3: val_accuracy improved from 0.76527 to 0.79281, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m100s\u001b[0m 1s/step - accuracy: 0.7576 - loss: 0.6887 - val_accuracy: 0.7928 - val_loss: 0.6131\n",
      "Epoch 4/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 877ms/step - accuracy: 0.7943 - loss: 0.5932\n",
      "Epoch 4: val_accuracy improved from 0.79281 to 0.81677, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m99s\u001b[0m 1s/step - accuracy: 0.7944 - loss: 0.5927 - val_accuracy: 0.8168 - val_loss: 0.5393\n",
      "Epoch 5/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 874ms/step - accuracy: 0.8189 - loss: 0.5111\n",
      "Epoch 5: val_accuracy improved from 0.81677 to 0.83234, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m99s\u001b[0m 1s/step - accuracy: 0.8189 - loss: 0.5109 - val_accuracy: 0.8323 - val_loss: 0.4892\n",
      "Epoch 6/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 876ms/step - accuracy: 0.8450 - loss: 0.4518\n",
      "Epoch 6: val_accuracy improved from 0.83234 to 0.83473, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m99s\u001b[0m 1s/step - accuracy: 0.8450 - loss: 0.4518 - val_accuracy: 0.8347 - val_loss: 0.4529\n",
      "Epoch 7/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 876ms/step - accuracy: 0.8442 - loss: 0.4293\n",
      "Epoch 7: val_accuracy improved from 0.83473 to 0.84311, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m99s\u001b[0m 1s/step - accuracy: 0.8442 - loss: 0.4291 - val_accuracy: 0.8431 - val_loss: 0.4252\n",
      "Epoch 8/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 878ms/step - accuracy: 0.8485 - loss: 0.4153\n",
      "Epoch 8: val_accuracy did not improve from 0.84311\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m98s\u001b[0m 1s/step - accuracy: 0.8486 - loss: 0.4152 - val_accuracy: 0.8431 - val_loss: 0.4069\n",
      "Epoch 9/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 879ms/step - accuracy: 0.8624 - loss: 0.3734\n",
      "Epoch 9: val_accuracy improved from 0.84311 to 0.85150, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m99s\u001b[0m 1s/step - accuracy: 0.8623 - loss: 0.3734 - val_accuracy: 0.8515 - val_loss: 0.3915\n",
      "Epoch 10/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 877ms/step - accuracy: 0.8533 - loss: 0.3785\n",
      "Epoch 10: val_accuracy did not improve from 0.85150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m98s\u001b[0m 1s/step - accuracy: 0.8533 - loss: 0.3785 - val_accuracy: 0.8503 - val_loss: 0.3815\n",
      "Epoch 11/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 873ms/step - accuracy: 0.8655 - loss: 0.3511\n",
      "Epoch 11: val_accuracy improved from 0.85150 to 0.85509, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m98s\u001b[0m 1s/step - accuracy: 0.8656 - loss: 0.3510 - val_accuracy: 0.8551 - val_loss: 0.3674\n",
      "Epoch 12/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 885ms/step - accuracy: 0.8722 - loss: 0.3440\n",
      "Epoch 12: val_accuracy improved from 0.85509 to 0.86587, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m99s\u001b[0m 1s/step - accuracy: 0.8721 - loss: 0.3441 - val_accuracy: 0.8659 - val_loss: 0.3584\n",
      "Epoch 13/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 875ms/step - accuracy: 0.8681 - loss: 0.3626\n",
      "Epoch 13: val_accuracy did not improve from 0.86587\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m98s\u001b[0m 1s/step - accuracy: 0.8682 - loss: 0.3623 - val_accuracy: 0.8635 - val_loss: 0.3527\n",
      "Epoch 14/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 884ms/step - accuracy: 0.8808 - loss: 0.3204\n",
      "Epoch 14: val_accuracy improved from 0.86587 to 0.86946, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m100s\u001b[0m 1s/step - accuracy: 0.8808 - loss: 0.3204 - val_accuracy: 0.8695 - val_loss: 0.3366\n",
      "Epoch 15/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 871ms/step - accuracy: 0.8755 - loss: 0.3368\n",
      "Epoch 15: val_accuracy improved from 0.86946 to 0.87186, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m98s\u001b[0m 1s/step - accuracy: 0.8755 - loss: 0.3367 - val_accuracy: 0.8719 - val_loss: 0.3293\n",
      "Epoch 16/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 862ms/step - accuracy: 0.8871 - loss: 0.3132\n",
      "Epoch 16: val_accuracy improved from 0.87186 to 0.87425, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8871 - loss: 0.3130 - val_accuracy: 0.8743 - val_loss: 0.3235\n",
      "Epoch 17/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 868ms/step - accuracy: 0.8828 - loss: 0.3188\n",
      "Epoch 17: val_accuracy did not improve from 0.87425\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8828 - loss: 0.3187 - val_accuracy: 0.8719 - val_loss: 0.3172\n",
      "Epoch 18/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 871ms/step - accuracy: 0.8861 - loss: 0.2964\n",
      "Epoch 18: val_accuracy improved from 0.87425 to 0.87904, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m98s\u001b[0m 1s/step - accuracy: 0.8861 - loss: 0.2965 - val_accuracy: 0.8790 - val_loss: 0.3146\n",
      "Epoch 19/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 864ms/step - accuracy: 0.9010 - loss: 0.2818\n",
      "Epoch 19: val_accuracy improved from 0.87904 to 0.88383, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.9009 - loss: 0.2819 - val_accuracy: 0.8838 - val_loss: 0.3127\n",
      "Epoch 20/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 862ms/step - accuracy: 0.8748 - loss: 0.3086\n",
      "Epoch 20: val_accuracy improved from 0.88383 to 0.88743, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 1s/step - accuracy: 0.8749 - loss: 0.3086 - val_accuracy: 0.8874 - val_loss: 0.3087\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(train_generator, epochs=20, verbose=1, \n",
    "          validation_data=val_generator, callbacks=callbacks_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ca201a77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.6863 - loss: 0.7482\n",
      "Epoch 1: val_accuracy improved from 0.88743 to 0.88862, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m133s\u001b[0m 1s/step - accuracy: 0.6870 - loss: 0.7467 - val_accuracy: 0.8886 - val_loss: 0.3005\n",
      "Epoch 2/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8634 - loss: 0.3747\n",
      "Epoch 2: val_accuracy improved from 0.88862 to 0.89341, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m117s\u001b[0m 1s/step - accuracy: 0.8635 - loss: 0.3746 - val_accuracy: 0.8934 - val_loss: 0.2955\n",
      "Epoch 3/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8711 - loss: 0.3519\n",
      "Epoch 3: val_accuracy did not improve from 0.89341\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m119s\u001b[0m 1s/step - accuracy: 0.8712 - loss: 0.3516 - val_accuracy: 0.8826 - val_loss: 0.2969\n",
      "Epoch 4/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8919 - loss: 0.2747\n",
      "Epoch 4: val_accuracy did not improve from 0.89341\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m123s\u001b[0m 1s/step - accuracy: 0.8919 - loss: 0.2748 - val_accuracy: 0.8838 - val_loss: 0.2918\n",
      "Epoch 5/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8840 - loss: 0.2822\n",
      "Epoch 5: val_accuracy did not improve from 0.89341\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m118s\u001b[0m 1s/step - accuracy: 0.8841 - loss: 0.2823 - val_accuracy: 0.8886 - val_loss: 0.2780\n",
      "Epoch 6/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9096 - loss: 0.2483\n",
      "Epoch 6: val_accuracy did not improve from 0.89341\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m117s\u001b[0m 1s/step - accuracy: 0.9095 - loss: 0.2485 - val_accuracy: 0.8802 - val_loss: 0.2974\n",
      "Epoch 7/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.8969 - loss: 0.2609\n",
      "Epoch 7: val_accuracy did not improve from 0.89341\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m117s\u001b[0m 1s/step - accuracy: 0.8969 - loss: 0.2609 - val_accuracy: 0.8826 - val_loss: 0.2897\n",
      "Epoch 8/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9144 - loss: 0.2426\n",
      "Epoch 8: val_accuracy did not improve from 0.89341\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m115s\u001b[0m 1s/step - accuracy: 0.9144 - loss: 0.2426 - val_accuracy: 0.8838 - val_loss: 0.2862\n",
      "Epoch 9/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9092 - loss: 0.2395\n",
      "Epoch 9: val_accuracy did not improve from 0.89341\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m116s\u001b[0m 1s/step - accuracy: 0.9092 - loss: 0.2395 - val_accuracy: 0.8874 - val_loss: 0.2681\n",
      "Epoch 10/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9146 - loss: 0.2205\n",
      "Epoch 10: val_accuracy improved from 0.89341 to 0.89461, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m115s\u001b[0m 1s/step - accuracy: 0.9147 - loss: 0.2205 - val_accuracy: 0.8946 - val_loss: 0.2568\n",
      "Epoch 11/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9034 - loss: 0.2618\n",
      "Epoch 11: val_accuracy improved from 0.89461 to 0.89820, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m120s\u001b[0m 1s/step - accuracy: 0.9036 - loss: 0.2614 - val_accuracy: 0.8982 - val_loss: 0.2588\n",
      "Epoch 12/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9176 - loss: 0.2274\n",
      "Epoch 12: val_accuracy improved from 0.89820 to 0.90539, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m120s\u001b[0m 1s/step - accuracy: 0.9176 - loss: 0.2273 - val_accuracy: 0.9054 - val_loss: 0.2370\n",
      "Epoch 13/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9190 - loss: 0.2041\n",
      "Epoch 13: val_accuracy improved from 0.90539 to 0.90898, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m124s\u001b[0m 1s/step - accuracy: 0.9190 - loss: 0.2042 - val_accuracy: 0.9090 - val_loss: 0.2331\n",
      "Epoch 14/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9313 - loss: 0.1961\n",
      "Epoch 14: val_accuracy did not improve from 0.90898\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m119s\u001b[0m 1s/step - accuracy: 0.9313 - loss: 0.1961 - val_accuracy: 0.9054 - val_loss: 0.2228\n",
      "Epoch 15/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9269 - loss: 0.2086\n",
      "Epoch 15: val_accuracy improved from 0.90898 to 0.91737, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m120s\u001b[0m 1s/step - accuracy: 0.9269 - loss: 0.2086 - val_accuracy: 0.9174 - val_loss: 0.2074\n",
      "Epoch 16/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9246 - loss: 0.1920\n",
      "Epoch 16: val_accuracy improved from 0.91737 to 0.91976, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m120s\u001b[0m 1s/step - accuracy: 0.9247 - loss: 0.1920 - val_accuracy: 0.9198 - val_loss: 0.2042\n",
      "Epoch 17/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9214 - loss: 0.1979\n",
      "Epoch 17: val_accuracy improved from 0.91976 to 0.92455, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m120s\u001b[0m 1s/step - accuracy: 0.9215 - loss: 0.1979 - val_accuracy: 0.9246 - val_loss: 0.1972\n",
      "Epoch 18/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9194 - loss: 0.2130\n",
      "Epoch 18: val_accuracy improved from 0.92455 to 0.92695, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m120s\u001b[0m 1s/step - accuracy: 0.9194 - loss: 0.2130 - val_accuracy: 0.9269 - val_loss: 0.1941\n",
      "Epoch 19/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9329 - loss: 0.1763\n",
      "Epoch 19: val_accuracy did not improve from 0.92695\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m119s\u001b[0m 1s/step - accuracy: 0.9328 - loss: 0.1764 - val_accuracy: 0.9186 - val_loss: 0.1959\n",
      "Epoch 20/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9228 - loss: 0.2006\n",
      "Epoch 20: val_accuracy did not improve from 0.92695\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m120s\u001b[0m 1s/step - accuracy: 0.9229 - loss: 0.2005 - val_accuracy: 0.9246 - val_loss: 0.1881\n",
      "Epoch 21/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9423 - loss: 0.1705\n",
      "Epoch 21: val_accuracy did not improve from 0.92695\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m119s\u001b[0m 1s/step - accuracy: 0.9422 - loss: 0.1707 - val_accuracy: 0.9257 - val_loss: 0.1855\n",
      "Epoch 22/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9399 - loss: 0.1615\n",
      "Epoch 22: val_accuracy did not improve from 0.92695\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m120s\u001b[0m 1s/step - accuracy: 0.9398 - loss: 0.1617 - val_accuracy: 0.9269 - val_loss: 0.1803\n",
      "Epoch 23/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9289 - loss: 0.1781\n",
      "Epoch 23: val_accuracy improved from 0.92695 to 0.93413, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m122s\u001b[0m 1s/step - accuracy: 0.9290 - loss: 0.1781 - val_accuracy: 0.9341 - val_loss: 0.1782\n",
      "Epoch 24/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9378 - loss: 0.1721\n",
      "Epoch 24: val_accuracy did not improve from 0.93413\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m120s\u001b[0m 1s/step - accuracy: 0.9378 - loss: 0.1721 - val_accuracy: 0.9293 - val_loss: 0.1782\n",
      "Epoch 25/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9261 - loss: 0.1756\n",
      "Epoch 25: val_accuracy did not improve from 0.93413\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m121s\u001b[0m 1s/step - accuracy: 0.9261 - loss: 0.1756 - val_accuracy: 0.9305 - val_loss: 0.1739\n",
      "Epoch 26/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9359 - loss: 0.1765\n",
      "Epoch 26: val_accuracy did not improve from 0.93413\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m121s\u001b[0m 1s/step - accuracy: 0.9360 - loss: 0.1765 - val_accuracy: 0.9317 - val_loss: 0.1714\n",
      "Epoch 27/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9350 - loss: 0.1819\n",
      "Epoch 27: val_accuracy improved from 0.93413 to 0.93533, saving model to ../code files/trained_model.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m120s\u001b[0m 1s/step - accuracy: 0.9351 - loss: 0.1818 - val_accuracy: 0.9353 - val_loss: 0.1718\n",
      "Epoch 28/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9317 - loss: 0.1707\n",
      "Epoch 28: val_accuracy did not improve from 0.93533\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m121s\u001b[0m 1s/step - accuracy: 0.9317 - loss: 0.1706 - val_accuracy: 0.9293 - val_loss: 0.1720\n",
      "Epoch 29/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9439 - loss: 0.1532\n",
      "Epoch 29: val_accuracy did not improve from 0.93533\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m121s\u001b[0m 1s/step - accuracy: 0.9439 - loss: 0.1533 - val_accuracy: 0.9317 - val_loss: 0.1741\n",
      "Epoch 30/30\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1s/step - accuracy: 0.9369 - loss: 0.1534\n",
      "Epoch 30: val_accuracy did not improve from 0.93533\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m124s\u001b[0m 1s/step - accuracy: 0.9369 - loss: 0.1535 - val_accuracy: 0.9317 - val_loss: 0.1741\n"
     ]
    }
   ],
   "source": [
    "# Unfreeze last 30 layers\n",
    "for layer in base_model.layers[-30:]:\n",
    "    layer.trainable = True\n",
    "\n",
    "model.compile(optimizer=Adam(learning_rate=1e-5),\n",
    "              loss='categorical_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "history = model.fit(\n",
    "    train_generator,\n",
    "    validation_data=val_generator,\n",
    "    epochs=30,\n",
    "    callbacks=callbacks_list,\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abeca84d",
   "metadata": {},
   "source": [
    "#### Test Accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cbc3799c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 755ms/step - accuracy: 0.9187 - loss: 0.2226\n",
      "Test Accuracy: 93.32%\n"
     ]
    }
   ],
   "source": [
    "test_loss, test_accuracy = model.evaluate(test_generator)\n",
    "print(f\"Test Accuracy: {test_accuracy * 100:.2f}%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ebb0235",
   "metadata": {},
   "source": [
    "#### Accuracy Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "80d80cac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Prepare DataFrame from Keras history\n",
    "df = pd.DataFrame({\n",
    "    \"Epoch\": range(1, len(history.history['accuracy']) + 1),\n",
    "    \"Training Accuracy\": history.history['accuracy'],\n",
    "    \"Validation Accuracy\": history.history['val_accuracy']\n",
    "})\n",
    "\n",
    "# Melt DataFrame for Seaborn\n",
    "df_melted = df.melt(id_vars=\"Epoch\", \n",
    "                   value_vars=[\"Training Accuracy\", \"Validation Accuracy\"], \n",
    "                   var_name=\"Type\", \n",
    "                   value_name=\"Accuracy\")\n",
    "\n",
    "plt.figure(figsize=(8,6))\n",
    "sns.lineplot(data=df_melted, x=\"Epoch\", y=\"Accuracy\", hue=\"Type\", marker=\"o\")\n",
    "plt.title('Training and Validation Accuracy of Model')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.grid(True)\n",
    "plt.legend(title=\"\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20a62ac3",
   "metadata": {},
   "source": [
    "#### Loss Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e7187ae3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Prepare DataFrame from Keras history for loss\n",
    "df_loss = pd.DataFrame({\n",
    "    \"Epoch\": range(1, len(history.history['loss']) + 1),\n",
    "    \"Training Loss\": history.history['loss'],\n",
    "    \"Validation Loss\": history.history['val_loss']\n",
    "})\n",
    "\n",
    "# Melt DataFrame for Seaborn\n",
    "df_loss_melted = df_loss.melt(id_vars=\"Epoch\", \n",
    "                              value_vars=[\"Training Loss\", \"Validation Loss\"], \n",
    "                              var_name=\"Type\", \n",
    "                              value_name=\"Loss\")\n",
    "\n",
    "# Plot loss\n",
    "plt.figure(figsize=(8,6))\n",
    "sns.lineplot(data=df_loss_melted, x=\"Epoch\", y=\"Loss\", hue=\"Type\", marker=\"o\")\n",
    "plt.title('Training and Validation Loss of Model')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.grid(True)\n",
    "plt.legend(title=\"\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0dedec6",
   "metadata": {},
   "source": [
    "#### Confusion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "59d528ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 737ms/step\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Predict on test set\n",
    "y_pred = model.predict(test_generator, steps=test_generator.samples // test_generator.batch_size + 1)\n",
    "y_pred_classes = np.argmax(y_pred, axis=1)\n",
    "\n",
    "# True labels\n",
    "y_true = test_generator.classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0f56ece1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAtoAAAIjCAYAAAA9c7ziAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjMsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvZiW1igAAAAlwSFlzAAAPYQAAD2EBqD+naQAAaZ5JREFUeJzt3QmcTfX7wPHnjmUsY8ZuyL5kiQglKUuUUpZ2RQkpWpClqGzZKluRaLGUiFL8olKSJUuyR1kjS7YWZhjGMnP/r+frf273XDPM5Vz33pnP+9XJnHPPPfd777nLc57zfL/H5Xa73QIAAADAURHObg4AAACAItAGAAAAAoBAGwAAAAgAAm0AAAAgAAi0AQAAgAAg0AYAAAACgEAbAAAACAACbQAAACAACLQBAACAACDQBhBStm/fLrfffrvExMSIy+WS2bNnO7r9P/74w2x38uTJjm43nNWvX99MV9rZs2flhRdekGLFiklERIS0aNHC723oftT9uXr1akmvSpYsKY8//vgl3Vdfm/79+zveJgBpQ6AN4Dy///67PPXUU1K6dGnJli2bREdHS506deStt96SkydPBvSx27RpIxs3bpTBgwfLlClTpGbNmpJeaLCkgY++nim9jnqQobfrNHz4cL+3v3//fhNUrV+/XsLBxIkTZdiwYXL//ffLhx9+KM8//3yq677zzjtBPThatGiRZ998/PHHKa6jnxG9vXLlyle8fQBCU+ZgNwBAaPnqq6/kgQcekMjISHnsscdM0HD69GlZunSp9OzZU3799Vd57733AvLYGnyuWLFCXn75ZXn22WcD8hglSpQwj5MlSxYJhsyZM8uJEydkzpw58uCDD9pumzp1qjmwSUxMvKRta6A9YMAAkwGtVq1amu/33XffSTD88MMPctVVV8moUaMuuq4G2vnz57/kzK5TdP9MmzZNWrdufd6ZkuXLl5vbAcBCoA3AY9euXdKyZUsTjGoQVLhwYc9tzzzzjOzYscME4oHy119/mX9z584dsMfQjGMwgyE9gNHM5yeffHJeoK0B3F133SWff/75FWmLBvw5cuSQrFmzSjAcPnw4oPs6EJo0aSJffvml/P333ybw9953hQoVknLlysmRI0eC2kYAoYPSEQAeb7zxhhw/flwmTJhgC7ItZcuWlS5duthqbAcOHChlypQxAaRmUl966SU5deqU7X66/O677zZZ8RtuuMEEulqW8tFHH3nW0ZIHDfCVZs41INb7Kc1iWn970/voet7mz58vN998swngoqKipHz58qZNF6vR1gOLW265RXLmzGnu27x5c9m8eXOKj6cHHNomXU9rydu2bWuC1rR65JFH5JtvvpGjR496lq1atcqUjuhtvv7991/p0aOHVKlSxTwnLT258847ZcOGDbbShuuvv978re2xyhys56k12Hp2Ys2aNVK3bl0TYFuvi2+Ntpbv6D7yff6NGzeWPHnymMz5hSQkJEj37t1N7bW+L3QfaCmM2+227YOFCxeaMyRWW/U5pET3va63ePFiz7q+NeX6nuvWrZsUKFDA7MN77rnHc+DmTV93az/nypXLHNjottNK3xf6nD777DPbcg209cApU6ZM590nrZ8TfX0GDRokRYsWNfunQYMGqbZN3ztdu3b1vMb62Xz99dclOTk5zc8FQOARaAPw0HIGDYBvuummNK3/xBNPSN++faV69erm9H+9evVk6NChJivuS4NTrcW97bbbZMSIESZg02DVCiTuvfdeTwnBww8/bOqz33zzTb/ar9vSgF4DmFdffdU8TrNmzWTZsmUXvN/3339vgkjNsGowrQGblgFo5lmDQl8aUB07dsw8V/1bg1kt2Ugrfa4aLH7xxRe2QK1ChQrmtfS1c+dO0ylUn9vIkSPNgYjWsevrbQW9FStWNM9ZPfnkk+b100mDass///xjAnQtK9HXVgO5lGgtvgasGnAnJSWZZe+++64pMRkzZowUKVIk1eemwaK+5rov77jjDtNeDbS1zfq6Kt22tk2frwaVVlv1OaRE26rr6frWulpe5O25554zBx79+vWTTp06mfeyb/mR3k8Daz1Y0aC0T58+8ttvv5kDs5T2c0o0ANZgW89IWPRx9b2X0kGSP58TXUfbVLVqVVO7rp9F7RisBy7e9KBOt6G14lreNXr0aPNe7d27t+c1BhAi3ADgdrvj4uI03ehu3rx5mtZfv369Wf+JJ56wLe/Ro4dZ/sMPP3iWlShRwixbsmSJZ9nhw4fdkZGR7u7du3uW7dq1y6w3bNgw2zbbtGljtuGrX79+Zn3LqFGjzPxff/2Varutx5g0aZJnWbVq1dwFCxZ0//PPP55lGzZscEdERLgfe+yx8x6vXbt2tm3ec8897nz58qX6mN7PI2fOnObv+++/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cvpf/3stA0i7pNNnZf+aXVK6UWXPMj27pPP7VthHFkBoY1/CmwbZ3tOlBNqxsbHm30OHDtmW67x1m/57+PBh2+1nz541I5FY66RVug+0NZDVOhtvmvXWDK6lf//+Uq1aNZkyZYopqdDTEZppPnbsmGcd/Vt7oGoWWIeDGTVqlNSvX1+6du160TZo4b0OC1OxYkX54osv5IYbbjDZ7AceeEDmzJljaoF0exZt27hx40whvw47U7p0aZk5c6Ztmy+++KJcffXVJljW2/v06SNnzpyxraPbvv766yVbtmySP39+W02Rd+mI/q30dn1snf/jjz9MLdLq1faaZL2Ptj05Ofm853nq1CmTqfee0qtssTHm31OH7Kcudd66zVfOMoWkzHONZde7C65IG4GM6sTfx8SdlCw5C9k/izp//ODRoLUL/mNfhp9QGHXkQkqVKmWC5QUL/vst1nhFa69r165t5vVfrZJYs+bcGWv1ww8/mNhHk6b+SPeBdlr9/vvvJgDXIVx0Wrx4sbz22mue27t16ybLli2TL7/80gz18uOPP8ratWvTtO3169fLb7/9Zrahwas3HX5GC+w/+eQT23INnO+77z7ZsGGDCfCtXrCWXLlymYMI3e5bb70l77//vi1Y16y5Bs7aQ3bdunXmDaUBfmplJGrSpEly4MABM6/BtrZLl3nTeS3T8X0eSmulvGuntJYK52QrkkfqzHtR/vxspfzxwcJgNwcAgHQbaB8/ftzEXjpZHSD17z179piEoiZJBw0aZGK6jRs3ymOPPWZGErHKZzUxescdd0iHDh3k559/NvHfs88+a2Ixf0YcsV4PiJijFA1cK1euLLfccos8+uijnqMdzWZ/+OGHZkiXhg0bmnU04ExKStvIEVomYu24lOhyax2LZrufeOIJk7UeOHCg6fmqQ8tYdFiam266yQTEOih7jx495NNPP/XcrmUp+obQmnDdvgb0vXv3TrWMRGnmX4/yrHl9fD0A0Ey10gMLfUO2bds2xe3o9uPi4jyT1lKlV4kHz2WyI32yLDpv3WbJVji33LLwFfln+XZZ++QHV7SdQEaUI38ucWWKkASfM046HxVrP8OJ0Ma+xKXQs/HXXXedmZQmOvVvvUiNeuGFF+S5554z42LrmX8NzHU4P60AsEydOlUqVKhg4j5NWt58883y3nvv+d0WAu3/pwGrZoktWh5i1efs3LnTlGV4Z4Q1Y1u+fHm/HkNLSNLKOn3hPe+d0Z4xY4bUqVPHBMZRUVEm8NYjNYseuemb43LokV2mTJlMJ0mlByINGjTwlJr40lop3/qp9Eo7NiYeOCIFGl7jWZY5V3bJW6uM/OtVN6iZ7FsW9ZGja3bJmrbj9U0QpBYDGUemrJmlSI1SsnPBr55l7uRkM1/0An0oEHrYl+FHC3O1OtfRSfyjpb0ac/lOGseYNrpc8uqrr5oRRPQiNd9//71JbHrTEUamTZtmkq2aPJw4caKJt/yV7gNtLXHwDXB9a5lVliznhmSz6E5IqQ75Ulg7zztQ9qbLfXfwhWhNt5aT6BGWlrloacjLL79s61Cptd2XK2vWrOZ0imbvddv6hmvXrp1kFJlyRkpM1RJmUjlLFTB/Zy+Wz8zveHOeVHjlHinctLpEVy4mNT/qJIn7j8r+2as9QXbdRX3k5J5/ZGOPqRJZINpkvH2z4LjyTh8/JQd/OWAmdWT3EfN33N5zNZ8n/z1h5v/aeu5g++/tf5v544f+67eB0HZjtyay9v2Fsv7DJfLX5j9lbqeJciYhUaq1rRfspsFP7EuEs3QzvF9qtAxCj0b0cpzWcHZWzU5aaWdDDcS1drl48eJmmR7daLlH3bp1L3p/7Wippx+0hlrLObzrm7UGW4+kfMeC1FFKNMj1nrdOgSxfvtx0SNTg2rJ7927b/a+99lpT+pJamYcvfX4plcJo+YiWyrzzzjumx+29994rGUWemqVNoGy5dtSj5t/dkxfLmrbvyrY35phg/Lr3npAsuXPIP0u3ybI7XpPkU+cO5AreVkWiysWaqcmf9svAfuF65Ao/G3jbv+5P+fDuiZ757176xvxb9ZHrpMW4+2TrN1vkf09/4bn983YzzL/1ejWQ+r0v70wRrozKD9WWE3/Fy6K+M02nudhqJaTVvF4SxYFu2GFfhpcIl9tMjm5T3KL/haN0FWhr8OsbRFeqVMmMzPHSSy9J586dTa9S69RBWmlJSZs2baRnz57mVIIOYt6vXz8TMHuPXpIaXWfChAlmGD/t4Ki1zFryoW3p3r27KQvxHb3ks88+M3XZWhOkdUJajK/bUOXKlTNlItOnTze1Rdrx0SrvsGj7tHSkTJkyJrjXIPnrr782o5WkRMtBNDDXchQtAcmTJ49ZrvXdN954o7mfZrOdyJSHi78Xb75oQLy530wzpWTPh0vMhNBT8pbS0i9uUKq3V2tV3UwIbzc829hMCH/sS4SrdFU6smjRIk/xuzVpR8KPP/7YBJlVqlQxnft0OD9/jRw50gTEd999txmNQwNSDUK9C+cvRDsualZaa5512L6yZcuagFsDeB3FxHcsSO3EqIG0ZqY/+ugj0249aFDNmjWT559/3vSA1Wy5Zrh1lBLf+iQN1rVHra5z6623mmA9NSNGjDDt0JFCrMy5RYcm1NKRjFQ2AgAA/Od4fbbr3BSuXG5/eujBQ0tRrrrqKhOgaiDqpFC7SqMerGjQ/ssv/13lMC10XErtNDpFykgOyRSw9uHKufcCWWCEmejSwW4BAB/x8cclJqa+OUMfbgMKWL/5X0eUlpwuZ3/zE9xJ0iR5Z1i+LumqdCSQtMPhli1bzMgjuqO1t6pq3ry5pFc63I1euObtt982400CAABcdNSRAGwzXKWr0pFA03G0rQvMaEZbL1qjV1zUf3XIl9SmcKWlKTVq1DBlKJSNAACAizlX6uF2eJKwRUY7jbRu2ftSnN6006K/I5lcSKhU82inUX87jgIAAOAcAm0H6Egc2rkRAAAgIwtE50WXhC9KRwAAAIAAIKMNAAAAR5DRtiOjDQAAAAQAGW0AAACE9iXYwxQZbQAAACAAyGgDAADAEVywxo5AGwAAAM4IQGfIcEbpCAAAABAAZLQBAADgCIb3syOjDQAAAAQAGW0AAAA4wuVym8nRbQrD+wEAAADwQkYbAAAAjohwnZsc3aaEr3BuOwAAABCyyGgDAADAEYw6YkegDQAAAMc6LjrdedFFZ0gAAAAA3shoAwAAwBGUjtiR0QYAAAACgIw2AAAAHEFG246MNgAAABAAZLQBAADgiAiX20yOblMYdQQAAACAFzLaAAAAcAQ12nYE2gAAAHAsKHY6MHZJ+KJ0BAAAAAgAMtoAAABwhMvlNpOj2xQ6QwIAAADwQkYbAAAAjqAzpB0ZbQAAACAAyGgDAADAsQxuhMMp6IjwLdEmow0AAAAEAhltAAAAhO6oI67wTWkTaAMAAMAx4dx50WmUjgAAAAABQEYbAAAAoTu8n0vCFhltAAAAIADIaAMAAMARdIa0I6MNAAAABAAZbQAAADhCL1bj+AVrXBK2yGgDAAAAAUBGGwAAAI5g1BE7Am0AAAA4gkDbjtIRAAAAIADIaAMAAMARLnGbyelthisy2gAAAEAAkNFGwDXb11+io3MEuxlwwIDo3sFuAhzSzz0t2E2Ak5JOB7sFcELSGQl31GjbkdEGAAAAAoCMNgAAABzhinCZydFtSvimtMloAwAAAAFARhsAAACOcEWcmxzdpoQvAm0AAAA4gs6QdpSOAAAAAAFARhsAAADO0I6QDneGlDAuHiGjDQAAAAQAGW0AAAA4gs6QdmS0AQAAgAAgow0AAABHuFwuMzm9zXBFRhsAAAAIADLaAAAAcG4cbadrtN0StshoAwAAAAFARhsAAADO4NKQNmS0AQAA4Ojwfk5P/khKSpI+ffpIqVKlJHv27FKmTBkZOHCguN3/1aDo33379pXChQubdRo1aiTbt28XpxFoAwAAIN14/fXXZdy4cfL222/L5s2bzfwbb7whY8aM8ayj86NHj5bx48fLypUrJWfOnNK4cWNJTEx0tC2UjgAAAMARrgiXmRzdptu/7S1fvlyaN28ud911l5kvWbKkfPLJJ/Lzzz97stlvvvmmvPLKK2Y99dFHH0mhQoVk9uzZ0rJlS8faTkYbAAAAIS8+Pt42nTp1KsX1brrpJlmwYIFs27bNzG/YsEGWLl0qd955p5nftWuXHDx40JSLWGJiYqRWrVqyYsUKR9tMRhsAAAAh3xeyWLFituX9+vWT/v37n7d+r169TCBeoUIFyZQpk6nZHjx4sLRq1crcrkG20gy2N523bnMKgTYAAABC3t69eyU6OtozHxkZmeJ6n376qUydOlWmTZsm11xzjaxfv166du0qRYoUkTZt2lzBFhNoAwAAwCmXMErIRf3/YCEaZHsH2qnp2bOnyWpbtdZVqlSR3bt3y9ChQ02gHRsba5YfOnTIjDpi0flq1aqJk6jRBgAAQLpx4sQJiYiwh7haQpKcnGz+1mH/NNjWOm6Llpro6CO1a9d2tC1ktAEAAOAMHXHE4VFHxM9RR5o2bWpqsosXL25KR9atWycjR46Udu3amdtdLpcpJRk0aJCUK1fOBN467raWlrRo0cLRphNoAwAAIN1cGHLMmDEmcH766afl8OHDJoB+6qmnzAVqLC+88IIkJCTIk08+KUePHpWbb75Z5s2bJ9myZXO27W7vy+QADtLTMDpcTty+KRIdnSPYzYEDBkT3DnYT4JB+7mnBbgKclHQ62C2AA+LjEyQm720SFxeXplrkUPzN/+PakhKdydnK5PikZCn5yx9h+bqQ0QYAAEC6uWBNKKEzJAAAABAAZLQBAADgCFcAhvdzhXGRMxltAAAAIADIaAMAAMAROnSeTk5vM1yR0QYAAAACgIw2AAAAnOEKQBo3WcIWgTYAAADSzQVrQgmlIwAAAEAAkNEGAACAg8P7OdwZMkLCVhg3HQAAAAhdZLQBAAAQuhesiZCwFcZNBwAAAEIXGW0AAAA4g2FHbMhoAwAAAAFARhsAAACOoEbbjkAbAAAAjtCh/Zwf3s8l4SqMjxEAAACA0EVGGwAAAI6gL6QdGW0AAAAgAMhoAwAAwBHUaNuR0QYAAAACgIw2AAAAnKHJZ6cT0C4JW2S0AQAAgAAgow0AAABHcMEaOwJtAAAAOMLlCkBnSFf41o4QaCPNFi1aJA0aNJAjR45I7ty5JaPZvWyXLH9riexf/6ccP3hMHprWWircfY3ndrfbLYsGfy9rP1wliXEnpdiNJeSukS0kX9n8QW03RIrfUkFu6nm3FKlRSnIVySPTW4yUrf9b7bm9wj3XS82ODaVwjVKSI18uGV+ttxzasNu2jbvHt5dSjSqb+58+nih7l2+T71+cLv9s3R+EZ4S0+Hnsd7J82Fw5fjBOYqsWlzvHtJGrbigb7GbBDz++Nle2zF4jf285IJmzZ5FitctKo6EPSv7yhYPdNCBNwjgZH94ef/xxc4T22muv2ZbPnj07rI/c0rPTCaelUOXC0mRE8xRvX/bmEln57nK5680W8sQPT0vWHFnl43snytnEM1e8rbDLmjPSBM5fPzMp1dv3LN0q37/4Sarb2L9ml/yv7bsytmIP+bjxa+Zz+uh3vcJ62Kn0bNOMFfJdt4+lXr975am1g6VQ1eJmvyUcjgt20+CH3Uu2yPWdbpX2y/rIo/N6SvKZJPn4zuFyOuFUsJuGi1ywxukpXJHRDqJs2bLJ66+/Lk899ZTkyZPHkW2ePn1asmbN6si2YFfu9vJmSolms1e+s0zq9mwgFe6qZJa1ePdBGV52sGyZ+5tUvr/qFW4tvO2Yt8FMqfnl46Xm35gSqZ99WPv+D56/43b/LT+88ql0+uV1yV2ygBzZedjhFuNy/TTya6neoYFc17a+54zE9q/Wy7qJi+XmXs2C3TykUeuve9jmm098QoYX7iwH1vwhJeqm/H0MhBIy2kHUqFEjiY2NlaFDh6a6zueffy7XXHONREZGSsmSJWXEiBG223XZwIED5bHHHpPo6Gh58sknZfLkyaa0Y+7cuVK+fHnJkSOH3H///XLixAn58MMPzX00sO/cubMkJSV5tjVlyhSpWbOm5MqVy7TrkUcekcOHCSDS4ugfR+T4oWNSuv5/p6WzxWSTojWLyd6f9wS1bXBelhyRcl3beibAjtv7T7CbAx9Jp8+aMxClG1X2LHNFRJj5fSu2B7VtuDyn4k6af7PnzRnspuAiF6xxegpXBNpBlClTJhkyZIiMGTNG9u3bd97ta9askQcffFBatmwpGzdulP79+0ufPn1MIO1t+PDhUrVqVVm3bp25XWlQPXr0aJk+fbrMmzfP1Fffc8898vXXX5tJg+p3331XZs6c6dnOmTNnTNC+YcMGU8Lyxx9/mBKXtDp16pTEx8fbpozi+OFj5t+cBaNsy3U+4f9vQ/ir2amR9D42UV5KmCRl76wmU24bYk5lI7Sc+PuYuJOSJWehGNtynT9+8GjQ2oXL405Olnndpkmxm8pJwcpFg90cIE0oHQkyDX6rVasm/fr1kwkTJthuGzlypDRs2NATPF999dXy22+/ybBhw2wB8K233irdu3f3zP/4448maB43bpyUKVPGLNOMtgbXhw4dkqioKKlUqZLp2Lhw4UJ56KGHzDrt2rXzbKN06dImUL/++uvl+PHj5j4Xo5n5AQMGOPCqAKFp49RlsnP+JokqnFtu6nGX3P9pF5lYp78knaIOHwi0r56bIod/3SftFr8c7KbgYilcp9O4ERK2wrjp6YfWaWtJx+bNm23Ldb5OnTq2ZTq/fft2W8mHlnv40nIRK8hWhQoVMiUj3gGzLvMuDdEMetOmTaV48eKmfKRevXpm+Z49aSt96N27t8TFxXmmvXv3SkYRVTCX+Tfh8HHbcp3P+f+3Ifydij8p/+44KHt+3CKf3v+m5K9QWCrec/7nD8GVI38ucWWKkIRD9o6POh8Vm/FGTEoPvu48RbZ/tUHafN9LoovmDXZzgDQj0A4BdevWlcaNG5tA9VLkzHl+rVqWLFls8zpCQkrLkpOTzd8JCQmmDVrnPXXqVFm1apXMmjXL08EyLbSOXO/vPWUUuUvmkahCuWTn4t89y07FJ8q+1Xul2A3Fg9o2BHCsWJdLMkXaP1cIvkxZM5uhHHcu+NVWdqDzRWuXC2rb4B/taK5Btg7x99j8FyRPqQLBbhIuRuupAzGFKUpHQoQO86clJNp50VKxYkVZtmyZbT2d1xISre920pYtW+Sff/4x7ShWrJhZtnr1f+MMQ+T08VPy787/Or4d+eOIHPxlv2TPk0NiiuWWWk/XkR+H/SD5yuST3CXyysJB8yVX4VxS4e5zo5AgeLLkjJS8ZWM98/pjXahqCTn573GJ3/uPZMuTU2KK5zdjZCtrjF6t59UsaO5SBaXyQzfK799tlIS/4k1GTUeuOHPytGz/en3QnhdSd2O3JjK7zXgpUrO0XHVDGfnpzW/kTEKiVGt77kwdwsPXz02RjZ+skJZfdJHIXNk8NfaRMTkkS3ZG2ApJlI7YEGiHiCpVqkirVq1MXbRF6661Rlo7KGod9YoVK+Ttt9+Wd955x/HH13IRHRZQO2Z27NhRNm3aZB4X/9m/7k/58K73PfPfvfSV+bfqI9WlxfgHpE7XunIm4bTM6TxLEuMSpXjtEtL687aSORsZz2DTYOvxRef6OqjGox41/66fvNiMjV2+WQ1pMbmj5/b7Z3Q2/y7q/7ksHvC5nE08bS56U6vrnZI9T045fijOjO878ab+cuKvjNPpN5xUfqi22TeL+s40wVlstRLSal4vifLpIInQtnr8uWE1P2xov+ZE8wntpVqbW4LUKiDtCLRDyKuvviozZszwzFevXl0+/fRT6du3rwl6CxcubNbxZySQtCpQoIAZzeSll14ywb4+to5m0qwZ481aSt5SWvrFpz4Uo5YRNHjlNjMhtOxevFkGuB5J9fYNHy4xU2qOHzgq0+56I0CtQ6Dc8GxjMyF89TtrH2ULYSAQpR4R4Vs64nJrARQQADq8X0xMjMTtmyLR0TmC3Rw4YED0pfUjQOjp554W7CbASUlp60uD0BYfnyAxeW8zAwqEWz8n6zf/3xYVJTqLs+Wt8WeSJO/szWH5upDRBgAAgDOo0U4vTQcAAABCFxltAAAAOIMabRsy2gAAAEAAkNEGAACAM8ho2xBoAwAAwBmuANRLuCRsUToCAAAABAAZbQAAADiD0hEbMtoAAABAAJDRBgAAgDO4YE16aToAAAAQushoAwAAwBnUaNuQ0QYAAAACgIw2AAAAnKHJZ6cT0C4JWwTaAAAAcAalIzaUjgAAAAABQEYbAAAAziCjbUNGGwAAAAgAMtoAAABwBhes8T/Q/vLLLyWtmjVrluZ1AQAAgPQqTYF2ixYt0rQxl8slSUlJl9smAAAAhCNqtP0PtJOTk9OyGgAAAAAnarQTExMlW7Zsl7MJAAAApBMul4grwvlthiu/XwotDRk4cKBcddVVEhUVJTt37jTL+/TpIxMmTAhEGwEAAID0H2gPHjxYJk+eLG+88YZkzZrVs7xy5crywQcfON0+AAAAhFuNttNTRgm0P/roI3nvvfekVatWkilTJs/yqlWrypYtW5xuHwAAAMJteD+npzDld9P//PNPKVu2bIodJs+cOeNUuwAAAICw5negXalSJfnxxx/PWz5z5ky57rrrnGoXAAAAwg2lI5c36kjfvn2lTZs2JrOtWewvvvhCtm7dakpK5s6d6+/mAAAAgHTJ74x28+bNZc6cOfL9999Lzpw5TeC9efNms+y2224LTCsBAAAQ+shoX/442rfccovMnz//Uu4KAAAAZAiXfMGa1atXm0y2Vbddo0YNJ9sFAACAcBOIUUIiJOME2vv27ZOHH35Yli1bJrlz5zbLjh49KjfddJNMnz5dihYtGoh2AgAAAGHF72OEJ554wgzjp9nsf//910z6t3aM1NsAAACQkTPaTtdoi9900I7WrVtLvnz5JHv27FKlShVTjWFxu92mn2HhwoXN7Y0aNZLt27cHP9BevHixjBs3TsqXL+9Zpn+PGTNGlixZ4nT7AAAAEC5C4II1R44ckTp16kiWLFnkm2++kd9++01GjBghefLk8ayjVzgfPXq0jB8/XlauXGkG+GjcuLEkJiYGt3SkWLFiKV6YJikpSYoUKeJUuwAAAACP+Pj4/2ZEJDIy0ky+Xn/9dROvTpo0ybOsVKlStmz2m2++Ka+88ooZTU/pMNWFChWS2bNnS8uWLSVoGe1hw4bJc889Z0u/699dunSR4cOHO9YwAAAAhJkADu9XrFgxiYmJ8UxDhw5NsQlffvml1KxZUx544AEpWLCguaDi+++/77l9165dcvDgQVMuYtHt1apVS1asWHHlM9qaane5/hvDMCEhwTQmc+Zzdz979qz5u127dtKiRQtHGwgAAADs3btXoqOjPfMpZbPVzp07TZlzt27d5KWXXpJVq1ZJ586dJWvWrOaiixpkK81ge9N567YrGmhreh0AAAC4IFcAhuNznftHg2zvQDs1OkCHZrSHDBli5jWjvWnTJlOPrYH2lZSmQPtKNwoAAAC4FDqSiF7jxVvFihXl888/N3/Hxsaafw8dOmTWteh8tWrVxEmXdcyhPTO1MN17AgAAQAYVApdgr1OnjmzdutW2bNu2bVKiRAlPx0gNthcsWOC5XWNYHX2kdu3aEtRAW+uzn332WVNcrkOhaP229wQAAAAEy/PPPy8//fSTKR3ZsWOHTJs2Td577z155plnzO3a77Br164yaNAg03Fy48aN8thjj5nR85zua+h3oP3CCy/IDz/8YIrMtQj9gw8+kAEDBpjG6dAoAAAAyKBCYBzt66+/XmbNmiWffPKJVK5cWQYOHGj6G7Zq1coWz+ooek8++aRZ//jx4zJv3jzJli1bcMfRnjNnjgmo69evL23btpVbbrlFypYta9LxU6dOtT0JAAAAZCCXUOpxUZewvbvvvttMqdGs9quvvmqmQPI7o62XXC9durT5W3t+6ry6+eabuTIkAAAAcKmBtgbZOtC3qlChgnz66aeeTHfu3Ln93RwAAADSixDoDBnWgbaWi2zYsMH83atXLxk7dqypZ9HC8549ewaijQAAAEDY8btGWwNqi166csuWLbJmzRpTp33ttdc63T4AAACEi0vovHhRTm8vlANtX9oJ0hqXEAAAAIAfgfbo0aMlrfRa8gAAAMiAQmTUkbAKtEeNGpWmjelQKQTaOE+uYiK5ooLdCjign3tasJsAh5xt+miwmwAHZZ4zJdhNgBMynQ52CxCMQNsaZQQAAABIFTXaztZoAwAAAIbLdW5yepthKoyPEQAAAIDQRUYbAAAAztDks9MJaJeELTLaAAAAQACQ0QYAAIAzqNG+/Iz2jz/+KK1bt5batWvLn3/+aZZNmTJFli5deimbAwAAANIdvwPtzz//XBo3bizZs2eXdevWyalTp8zyuLg4GTJkSCDaCAAAgHCr03Y5NGWkQHvQoEEyfvx4ef/99yVLliye5XXq1JG1a9c63T4AAAAgY9Rob926VerWrXve8piYGDl69KhT7QIAAEC4oUb78jLasbGxsmPHjvOWa3126dKl/d0cAAAA0tuVIZ2ewpTfTe/QoYN06dJFVq5cKS6XS/bv3y9Tp06VHj16SKdOnQLTSgAAACC9l4706tVLkpOTpWHDhnLixAlTRhIZGWkC7eeeey4wrQQAAEDoo3Tk8gJtzWK//PLL0rNnT1NCcvz4calUqZJERUX5uykAAAAg3brkC9ZkzZrVBNgAAACAwSXYLy/QbtCggclqp+aHH37wd5MAAABAuuN3oF2tWjXb/JkzZ2T9+vWyadMmadOmjZNtAwAAQDihRvvyAu1Ro0aluLx///6mXhsAAACAgyMTtm7dWiZOnOjU5gAAAJDRL7/uymA12qlZsWKFZMuWzanNAQAAINxQOnJ5gfa9995rm3e73XLgwAFZvXq19OnTx9/NAQAAAOmS34F2TEyMbT4iIkLKly8vr776qtx+++1Otg0AAADhJBCXTI+QjBFoJyUlSdu2baVKlSqSJ0+ewLUKAAAACHN+HSNkypTJZK2PHj0auBYBAAAgvGu0nZ7ClN/J+MqVK8vOnTsD0xoAAAAgnfA70B40aJD06NFD5s6dazpBxsfH2yYAAABkUAzvd2k12trZsXv37tKkSRMz36xZM9ul2HX0EZ3XOm4AAAAgo0tzoD1gwADp2LGjLFy4MLAtAgAAQHhiHO1LC7Q1Y63q1auX1rsAAAAgAyHOvowabe9SEQAAAAAOjaN99dVXXzTY/vfff/3ZJAAAANILUtqXHmhrnbbvlSEBAAAAXGag3bJlSylYsKA/dwEAAEBGEYjh+FyS/mu0qc8GAAAAAjjqCAAAAJAiTcxGUKPtd6CdnJyc1lUBAACADM+vGm0AAAAgVdRo2xBoAwAAwBkM73fpF6wBAAAAkDZktAEAAOAMSkdsyGgDAAAAAUBGGwAAAM6gRtuGjDYAAAAQAGS0AQAA4AxqtG3IaAMAAAABQEYbAAAAzqVwnb4Ee4SErTBuOgAAABC6yGgDAADAGdRo2xBoAwAAwBkM72dD6QgAAAAQAGS0AQAA4AxKR2zIaAMAAAABQEYbuEw/j/1Olg+bK8cPxkls1eJy55g2ctUNZYPdLFwC9mX4yfTBSHEVKnDe8uSvvpfk8R+Kq3EDiahXW6RMSXHlyC5nWz4lknAiKG3FpeOzGUao0bYho51Gjz/+uLRo0UJC0eTJkyV37tyOba9kyZLy5ptvOra99GzTjBXyXbePpV6/e+WptYOlUNXi8nHj1yThcFywmwY/sS/DU1K3fnL20Wc9U9Irr5nl7qUrz60QmVWS1/4iyZ99GdyG4pLx2UQ4yzCBtsvluuDUv3//YDcxZKxatUqefPLJYDcjLPw08mup3qGBXNe2vhSoVFTuHt9esuSIlHUTFwe7afAT+zJMxR8TORrnmVzXVxP3/kPi3rTF3Oz+8ltxz5wrsmVHsFuKS8RnM0xrtJ2ewlSGCbQPHDjgmTRbGx0dbVvWo0ePK94mt9stZ8+elVBToEAByZEjR7CbEfKSTp+V/Wt2SelGlT3LXBERZn7fiu1BbRv8w75MJzJnEleDOpL8PQFYesFnE+EuwwTasbGxnikmJsZksa358ePHy80332xbX4NxLaHwNWDAABOIaqDesWNHOX36tOe25ORkGTp0qJQqVUqyZ88uVatWlZkzZ3puX7RokXncb775RmrUqCGRkZGydOlSc7833nhDypYta5YVL15cBg8ebLvP0aNHPdtZv369WfbHH3+k+nzHjRsnZcqUkaxZs0r58uVlypQptgBfM/j6OPp4RYoUkc6dO6dYOnKxdb2dOnVK4uPjbVN6duLvY+JOSpachWJsy3X++MH/9hdCH/syfXDdWEMkZw5xL/gx2E2BQ/hshiG9/HogpjBFZ0g/LFiwQLJly2aCXw1y27ZtK/ny5fMExRpkf/zxxyZwL1eunCxZskRat25tAvN69ep5ttOrVy8ZPny4lC5dWvLkySO9e/eW999/X0aNGmUCfs2wb9ly7rTnpZg1a5Z06dLFBMuNGjWSuXPnmrYWLVpUGjRoIJ9//rl5rOnTp8s111wjBw8elA0bNqS4LX/W1eevByIAEAyu2+qJe80vIv8SgAFBQ2dIGwJtP2h2eOLEiaasQoPOV199VXr27CkDBw6UM2fOyJAhQ+T777+X2rVrm/U1kNaM9bvvvmsLtPV+t912m/n72LFj8tZbb8nbb78tbdq0Mcs0E+2bYfeHBvHaefPpp5828926dZOffvrJLNdAe8+ePSaTr0F4lixZTLb6hhtuSHFb/qyrBwz6WBbNaBcrVkzSqxz5c4krU4QkHLJ3yNH5qFjnOqci8NiX6UCBfOKqWlmSh74V7JbAQXw2Ee4yTOmIE7QUxLt2WQPq48ePy969e2XHjh1y4sQJE0BHRUV5po8++kh+//1323Zq1qzp+Xvz5s2m5KJhw4aOtVO3WadOHdsyndfl6oEHHpCTJ0+aA4EOHTqYDHhqteL+rKulJVpS4z2lZ5myZpYiNUrJzgW/epa5k5PNfNHa5YLaNviHfRn+IhrVFYmLF/eq9cFuChzEZzOMM9pOT2GKjLZ+QUdEmFpkb5qh9ocG3Oqrr76Sq6666rwA1FvOnDk9f2st98Xaprzb52/bfGmWeevWrSb7Pn/+fJP5HjZsmCxevNhkrS913Yzoxm5NZHab8VKkZmm56oYy8tOb38iZhESp1va/MxgID+zLMKajRzWqK+4fftTOMvbbcseI5IkRKVLo3HyJoiInE0X++kfkeEJQmgv/8NlEOCPQ/v9RNrT2WINZ7WRodTj0pbXJmt21gmMtx9CstQajefPmNQG1llp4l4lcjNZy6/a0/vuJJ55IsW1K67a1nju1tnmrWLGiLFu2zFOKonS+UqVKnnl9zKZNm5rpmWeekQoVKsjGjRulevXq523Pn3UzmsoP1ZYTf8XLor4zTcec2GolpNW8XhLl03EHoY99Gb5c1a4RV8H8kjR/yXm3Rdx5q0Q8cq9nPvPrfcy/SW++R6fJMMFnM8xQo21DoC0i9evXl7/++suM/HH//ffLvHnzzMggvqUPOsJI+/bt5ZVXXjGdIfv16yfPPvusyTrnypXLDBH4/PPPm1FEtMY6Li7OBLi6He+g15t2rnzxxRflhRdeMDXgWuKhbfn111/NY+lIJBrI68gf2uly27ZtMmLEiAs+H60bf/DBB+W6664ztdVz5syRL774wmSlrQvcJCUlSa1atUwpjHbg1GC6RIkS523Ln3UzqhuebWwmhD/2ZXhyr9skZ5s+muJtyZ/MMhPCG59NhCtqtP8/A/zOO+/I2LFjTR32zz//nOK42lpHrRnounXrykMPPSTNmjWzXehGO0X26dPHjL6h27zjjjtMKYkO93chep/u3btL3759zf1024cPHza3aXnGJ598YkYhufbaa+X111+XQYMGXXB7egVL7WCpnR+106Z2xpw0aZI5oFB6FUkd5USDet2mBuAajOsIKr78WRcAAGRwrojATJfotddeM9UKXbt29SxLTEw0Z+g1ltHKhPvuu08OHTokgeBy+xYnAw7RUUd0zPK4uEUSHR0V7OYA8JJaBhjhKfOc/66VgPAVH39cYmLqmzPi4TaggPWbf3Tm3RKdw9k+XPEnzkju++f6/brola71DL/eR0dds64R0qlTJ5MI1bP22marOkGrEJxGRhsAAADO1VM7fbEal/812jpIRatWrcxZeauPm9JgfcKECTJy5Ei59dZbzQUE9az/8uXLTd87pxFoAwAAIOSH94v3ufq0Do+cGi0Nueuuu0xf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23bat2/vfvjhh22v6ezZsz236+c8MjLS/f7776fY1pT2g36mdZn1mfB9PjfddJO7Q4cOtu088MAD7iZNmpi/R4wY4b766qvdp0+fvujn9GLrXq7Nmzeb56LP03LLLbe4W7duner+0X1RqFAh96lTpy647Ut5T3s/d93+kCFDzH3mzp3rud27bcnJye6CBQua94KaMmWKu3z58ma5Rbej37Xffvutma9Xr9553+H6/aDPy7sd3o9z4MAB044+ffp4lq1YscIs09v8+Q65UPv1PXWh3w31zDPPuO+7775Ub0d4C990FpACzeBq5sOi5SHWqc6dO3ea7Ih3RlhPeVunSdPKn4up1q5d+7x574z2jBkzTIZFT6tqluaVV16RPXv22LLoDRs2lMuhp1A1+6tZOaXZmAYNGqR4Gj8caZ22lnR4v65K5/W19abzmkX0LvnQTJQvLRfR7JZFs6H6euk+8l7mfRpds1/aGU1PHet7sF69ema59/6EnZ5J8K5d1s+HljloqcCOHTvMmQXt+6CvuzVphlvPXHnz3oe630+dOnXZn5u0vJes95yWj508edKUf3Xo0MF81lKrFfdn3UtRoUIFuemmm2TixIlmXl9HzQRbZSOp0ay6lsV4c+o9rSVyuu90X+vnVc82aEbZomchLFYJkvXZ0my6Pgd9fOs9oOUjiYmJ570PLsb7cawzHN5nE6xl1mOn9TvkQu1PiZbPaKmTlvno89FSE74n0i8CbYQFLXHwDXB9a5mVnpL0pl96TtUha32h8g3oLLrcWicttKZby0m0LERP1eppx5dfftl2OlRr+C6X/njq6VAtF9Ft62l0rSdML+rWrWtOLWu5wKXQev20vI8u9N5KSEgwbdA646lTp5qyHevAJiN2sEzr5/VCNOC2yqf0gNOa9HS7b18H7314sc+MVS7l3T5/25bSyBJaKvDOO++Yx9fyAX1fprRdf9a9VBpUa4mK9knRz70eNFpBclo/B06+p3v27Gn2nZZ4aedlDby9Xeizpe8DDUq93wM6aUd0rRm/1N8Hq39PSsv8/c3w53dHy9G0o7Duo++++848Fy1DyojfExkFgTbCgh7564+Gfvlb/B2XVDNI+oVo1TKruLg484WdFtp5SLNFWufn+yWqWZfvv//+vBpIHaXEd147Uyrtda8dcjS41oxcuXLlZPfu3bb1NVPizzBc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",
      "text/plain": [
       "<Figure size 1200x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Confusion Matrix\n",
    "cm = confusion_matrix(y_true, y_pred_classes)\n",
    "\n",
    "# Labels from the generator\n",
    "class_labels = train_generator.class_indices.keys()\n",
    "display_labels = class_labels\n",
    "\n",
    "# Plot Confusion Matrix\n",
    "fig, ax = plt.subplots(figsize=(12, 6))\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=display_labels)\n",
    "disp.plot(cmap=plt.cm.YlOrRd, ax=ax)\n",
    "\n",
    "plt.title('Confusion Matrix of the Model')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "copdenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
